// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique()
  password_hash String
  settings      Settings?
  prders        Orders[]
  symbol        Symbols[]
  monitors      Monitors[]
  automations   Automations[]
  created_at    DateTime      @default(now())

  @@map("users")
}

model Settings {
  id         String   @id @default(uuid())
  apiURL     String
  streamURL  String
  apiKey     String
  secretKey  String
  user_id    String   @unique
  user       Users    @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())

  @@map("settings")
}

model Symbols {
  id              String   @id @default(uuid())
  symbol          String
  base            String
  quote           String
  base_precision  Float
  quote_precision Float
  min_notional    String
  min_lot_size    String
  is_favorite     Boolean  @default(false)
  user_id         String
  user            Users    @relation(fields: [user_id], references: [id])
  created_at      DateTime @default(now())

  @@unique([user_id, symbol])
  @@map("symbols")
}

model Orders {
  id               String   @id @default(uuid())
  symbol           String
  order_id         Int
  client_order_id  String
  side             String
  type             String
  quantity         String
  user_id          String
  status           String
  transaction_time String
  obs              String?
  limit_price      String?
  stop_price       String?
  commission       String?
  iceberg_quantity String?
  automatio_id     String?
  average_price    Decimal?
  net              Decimal?
  user             Users    @relation(fields: [user_id], references: [id])
  is_maker         Boolean  @default(false)
  created_at       DateTime @default(now())

  @@unique([user_id, order_id, client_order_id])
  @@index([symbol, user_id])
  @@map("orders")
}

model Monitors {
  id                String    @id @default(uuid())
  symbol            String
  type              String
  indexes           Indexes[]
  interval          String
  is_active         Boolean   @default(false)
  is_system_monitor Boolean   @default(false)
  user_id           String
  user              Users     @relation(fields: [user_id], references: [id])
  created_at        DateTime  @default(now())

  @@unique([user_id, symbol, interval])
  @@index([symbol, user_id])
  @@map("monitors")
}

model Indexes {
  id         String   @id @default(uuid())
  type       String
  params     String
  monitor_id String
  monitor    Monitors @relation(fields: [monitor_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([type, params, monitor_id])
  @@map("indexes")
}

model Automations {
  id         String   @id @default(uuid())
  name       String
  symbol     String
  user_id    String
  conditions String
  schedule   String?
  is_active  Boolean  @default(false)
  indexes    String[]
  user       Users    @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())

  @@unique([symbol, name, user_id])
  @@map("automations")
}
